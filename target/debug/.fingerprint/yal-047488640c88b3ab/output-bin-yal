{"message":"this `else { if .. }` block can be collapsed","code":{"code":"clippy::collapsible_else_if","explanation":null},"level":"warning","spans":[{"file_name":"src/lexer.rs","byte_start":11568,"byte_end":11904,"line_start":258,"line_end":266,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                {","highlight_start":17,"highlight_end":18},{"text":"                    if unk_on { non_single_char += &String::from(self.current_char); }","highlight_start":1,"highlight_end":87},{"text":"                    else","highlight_start":1,"highlight_end":25},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        self.start_origin();","highlight_start":1,"highlight_end":45},{"text":"                        unk_on = true;","highlight_start":1,"highlight_end":39},{"text":"                        non_single_char += &String::from(self.current_char);","highlight_start":1,"highlight_end":77},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::collapsible_else_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/lexer.rs","byte_start":11568,"byte_end":11904,"line_start":258,"line_end":266,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                {","highlight_start":17,"highlight_end":18},{"text":"                    if unk_on { non_single_char += &String::from(self.current_char); }","highlight_start":1,"highlight_end":87},{"text":"                    else","highlight_start":1,"highlight_end":25},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        self.start_origin();","highlight_start":1,"highlight_end":45},{"text":"                        unk_on = true;","highlight_start":1,"highlight_end":39},{"text":"                        non_single_char += &String::from(self.current_char);","highlight_start":1,"highlight_end":77},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"if unk_on { non_single_char += &String::from(self.current_char); }\n                else\n                {\n                    self.start_origin();\n                    unk_on = true;\n                    non_single_char += &String::from(self.current_char);\n                }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `else { if .. }` block can be collapsed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lexer.rs:258:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if unk_on { non_single_char += &String::from(self.current_char); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    else\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_else_if)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mif unk_on { non_single_char += &String::from(self.current_char); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 else\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     self.start_origin();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     unk_on = true;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     non_single_char += &String::from(self.current_char);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\n"}
{"message":"field is never read: `trace_back`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/error.rs","byte_start":76,"byte_end":94,"line_start":7,"line_end":7,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    trace_back: String,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Error` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/error.rs","byte_start":10,"byte_end":15,"line_start":2,"line_end":2,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/error.rs","byte_start":10,"byte_end":15,"line_start":2,"line_end":2,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/home/user/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs","byte_start":23582,"byte_end":23609,"line_start":694,"line_end":694,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `trace_back`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/error.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    trace_back: String,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Error` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/error.rs:2:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"associated function is never used: `true_value`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/lexer.rs","byte_start":392,"byte_end":402,"line_start":23,"line_end":23,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn true_value(&self) -> String","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated function is never used: `true_value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lexer.rs:23:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn true_value(&self) -> String\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"associated function is never used: `set_origin`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/lexer.rs","byte_start":712,"byte_end":722,"line_start":39,"line_end":39,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn set_origin(&mut self, x: i32, y :i32) {","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated function is never used: `set_origin`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lexer.rs:39:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn set_origin(&mut self, x: i32, y :i32) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"associated function is never used: `to_string`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/lexer.rs","byte_start":999,"byte_end":1008,"line_start":47,"line_end":47,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"    pub fn to_string(&self) -> String {","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated function is never used: `to_string`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lexer.rs:47:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn to_string(&self) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"unneeded late initalization","code":{"code":"clippy::needless_late_init","explanation":null},"level":"warning","spans":[{"file_name":"src/compiler.rs","byte_start":418,"byte_end":440,"line_start":21,"line_end":21,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    let data_type: String;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_late_init)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove the local","code":null,"level":"help","spans":[{"file_name":"src/compiler.rs","byte_start":418,"byte_end":440,"line_start":21,"line_end":21,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    let data_type: String;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null},{"message":"declare `data_type` here","code":null,"level":"help","spans":[{"file_name":"src/compiler.rs","byte_start":445,"byte_end":445,"line_start":22,"line_end":22,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    if var.data_type.value == \"string\"","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"let data_type: String = ","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null},{"message":"remove the assignments from the branches","code":null,"level":"help","spans":[{"file_name":"src/compiler.rs","byte_start":494,"byte_end":506,"line_start":24,"line_end":24,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        data_type = \"str\".to_string();","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/compiler.rs","byte_start":554,"byte_end":566,"line_start":28,"line_end":28,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"        data_type = var.data_type.value","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/compiler.rs","byte_start":523,"byte_end":524,"line_start":24,"line_end":24,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"        data_type = \"str\".to_string();","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/compiler.rs","byte_start":585,"byte_end":585,"line_start":28,"line_end":28,"column_start":40,"column_end":40,"is_primary":true,"text":[{"text":"        data_type = var.data_type.value","highlight_start":40,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null},{"message":"add a semicolon after the `if` expression","code":null,"level":"help","spans":[{"file_name":"src/compiler.rs","byte_start":591,"byte_end":591,"line_start":29,"line_end":29,"column_start":6,"column_end":6,"is_primary":true,"text":[{"text":"    }","highlight_start":6,"highlight_end":6}],"label":null,"suggested_replacement":";","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded late initalization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/compiler.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let data_type: String;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_late_init)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: declare `data_type` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mlet data_type: String = \u001b[0m\u001b[0mif var.data_type.value == \"string\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the assignments from the branches\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \"str\".to_string()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    else\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        var.data_type.value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add a semicolon after the `if` expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"message":"constructor `parser` has the same name as the type","code":{"code":"clippy::self_named_constructors","explanation":null},"level":"warning","spans":[{"file_name":"src/parser.rs","byte_start":748,"byte_end":1069,"line_start":43,"line_end":54,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn parser() -> Parser","highlight_start":5,"highlight_end":30},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        Parser","highlight_start":1,"highlight_end":15},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            run: true,","highlight_start":1,"highlight_end":23},{"text":"            to_parse: Vec::new(),","highlight_start":1,"highlight_end":34},{"text":"            current_token: Token{ value: \"ERR\".to_string(), token_type: \"ERR\".to_string(), x: -1, y: -1},","highlight_start":1,"highlight_end":106},{"text":"            lexer: Lexer::lexer(),","highlight_start":1,"highlight_end":35},{"text":"            index: -1,","highlight_start":1,"highlight_end":23},{"text":"            yal: Vec::new()","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::self_named_constructors)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constructor `parser` has the same name as the type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/parser.rs:43:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn parser() -> Parser\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Parser\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::self_named_constructors)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\u001b[0m\n\n"}
{"message":"implementation of inherent method `to_string(&self) -> String` for type `lexer::Token`","code":{"code":"clippy::inherent_to_string","explanation":null},"level":"warning","spans":[{"file_name":"src/lexer.rs","byte_start":992,"byte_end":1131,"line_start":47,"line_end":49,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn to_string(&self) -> String {","highlight_start":5,"highlight_end":40},{"text":"        format!(\"Token {} '{}' at char {}, line {}\", self.token_type, self.value, self.x, self.y)","highlight_start":1,"highlight_end":98},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::inherent_to_string)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"implement trait `Display` for type `lexer::Token` instead","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: implementation of inherent method `to_string(&self) -> String` for type `lexer::Token`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lexer.rs:47:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn to_string(&self) -> String {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        format!(\"Token {} '{}' at char {}, line {}\", self.token_type, self.value, self.x, self.y)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::inherent_to_string)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: implement trait `Display` for type `lexer::Token` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\u001b[0m\n\n"}
{"message":"constructor `lexer` has the same name as the type","code":{"code":"clippy::self_named_constructors","explanation":null},"level":"warning","spans":[{"file_name":"src/lexer.rs","byte_start":1578,"byte_end":6017,"line_start":77,"line_end":114,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn lexer() -> Lexer {","highlight_start":5,"highlight_end":30},{"text":"        let mut lexer = Lexer{defined_tokens: HashMap::new(), text_to_lex: [].to_vec(), index: -1, run: true, ","highlight_start":1,"highlight_end":111},{"text":"            current_char: ' ', x: 0, y: 1, the_nums: vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], ","highlight_start":1,"highlight_end":110},{"text":"            log: Vec::new(), error: Vec::new(), tok_start_x: 0,","highlight_start":1,"highlight_end":64},{"text":"            tok_start_y: 0};","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        lexer.defined_tokens.insert(String::from(\" \"), Token{value: String::from(\" \"), token_type: String::from(\"space\"), x: -1, y: -1});","highlight_start":1,"highlight_end":138},{"text":"        lexer.defined_tokens.insert(String::from(\"+\"), Token{value: String::from(\"+\"), token_type: String::from(\"plus\"), x: -1, y: -1});","highlight_start":1,"highlight_end":137},{"text":"        lexer.defined_tokens.insert(String::from(\"-\"), Token{value: String::from(\"-\"), token_type: String::from(\"dash\"), x: -1, y: -1});","highlight_start":1,"highlight_end":137},{"text":"        lexer.defined_tokens.insert(String::from(\"/\"), Token{value: String::from(\"/\"), token_type: String::from(\"slash\"), x: -1, y: -1});","highlight_start":1,"highlight_end":138},{"text":"        lexer.defined_tokens.insert(String::from(\"*\"), Token{value: String::from(\"*\"), token_type: String::from(\"asterisk\"), x: -1, y: -1});","highlight_start":1,"highlight_end":141},{"text":"        lexer.defined_tokens.insert(String::from(\"(\"), Token{value: String::from(\"(\"), token_type: String::from(\"paren lft\"), x: -1, y: -1});","highlight_start":1,"highlight_end":142},{"text":"        lexer.defined_tokens.insert(String::from(\")\"), Token{value: String::from(\")\"), token_type: String::from(\"paren rht\"), x: -1, y: -1});","highlight_start":1,"highlight_end":142},{"text":"        lexer.defined_tokens.insert(String::from(\"{\"), Token{value: String::from(\"{\"), token_type: String::from(\"curbrac lft\"), x: -1, y: -1});","highlight_start":1,"highlight_end":144},{"text":"        lexer.defined_tokens.insert(String::from(\"}\"), Token{value: String::from(\"}\"), token_type: String::from(\"curbrac rht\"), x: -1, y: -1});","highlight_start":1,"highlight_end":144},{"text":"        lexer.defined_tokens.insert(String::from(\"[\"), Token{value: String::from(\"[\"), token_type: String::from(\"brac lft\"), x: -1, y: -1});","highlight_start":1,"highlight_end":141},{"text":"        lexer.defined_tokens.insert(String::from(\"]\"), Token{value: String::from(\"]\"), token_type: String::from(\"brac rht\"), x: -1, y: -1});","highlight_start":1,"highlight_end":141},{"text":"        lexer.defined_tokens.insert(String::from(\"<\"), Token{value: String::from(\"<\"), token_type: String::from(\"less than\"), x: -1, y: -1});","highlight_start":1,"highlight_end":142},{"text":"        lexer.defined_tokens.insert(String::from(\">\"), Token{value: String::from(\">\"), token_type: String::from(\"greater than\"), x: -1, y: -1});","highlight_start":1,"highlight_end":145},{"text":"        lexer.defined_tokens.insert(String::from(\"&\"), Token{value: String::from(\"&\"), token_type: String::from(\"and\"), x: -1, y: -1});","highlight_start":1,"highlight_end":136},{"text":"        lexer.defined_tokens.insert(String::from(\"%\"), Token{value: String::from(\"%\"), token_type: String::from(\"percent\"), x: -1, y: -1});","highlight_start":1,"highlight_end":140},{"text":"        lexer.defined_tokens.insert(String::from(\"^\"), Token{value: String::from(\"^\"), token_type: String::from(\"caret\"), x: -1, y: -1});","highlight_start":1,"highlight_end":138},{"text":"        lexer.defined_tokens.insert(String::from(\"'\"), Token{value: String::from(\"'\"), token_type: String::from(\"single quote\"), x: -1, y: -1});","highlight_start":1,"highlight_end":145},{"text":"        lexer.defined_tokens.insert(String::from(\"\\\"\"), Token{value: String::from(\"\\\"\"), token_type: String::from(\"dub quote\"), x: -1, y: -1});","highlight_start":1,"highlight_end":144},{"text":"        lexer.defined_tokens.insert(String::from(\".\"), Token{value: String::from(\".\"), token_type: String::from(\"period\"), x: -1, y: -1});","highlight_start":1,"highlight_end":139},{"text":"        lexer.defined_tokens.insert(String::from(\";\"), Token{value: String::from(\";\"), token_type: String::from(\"semi colon\"), x: -1, y: -1});","highlight_start":1,"highlight_end":143},{"text":"        lexer.defined_tokens.insert(String::from(\":\"), Token{value: String::from(\":\"), token_type: String::from(\"colon\"), x: -1, y: -1});","highlight_start":1,"highlight_end":138},{"text":"        lexer.defined_tokens.insert(String::from(\"$\"), Token{value: String::from(\"$\"), token_type: String::from(\"dollar sign\"), x: -1, y: -1});","highlight_start":1,"highlight_end":144},{"text":"        lexer.defined_tokens.insert(String::from(\"=\"), Token{value: String::from(\"=\"), token_type: String::from(\"equals\"), x: -1, y: -1});","highlight_start":1,"highlight_end":139},{"text":"        lexer.defined_tokens.insert(String::from(\"@\"), Token{value: String::from(\"@\"), token_type: String::from(\"at\"), x: -1, y: -1});","highlight_start":1,"highlight_end":135},{"text":"        lexer.defined_tokens.insert(String::from(\"!\"), Token{value: String::from(\"!\"), token_type: String::from(\"excl mark\"), x: -1, y: -1});","highlight_start":1,"highlight_end":142},{"text":"        lexer.defined_tokens.insert(String::from(\"#\"), Token{value: String::from(\"#\"), token_type: String::from(\"hash tag\"), x: -1, y: -1});","highlight_start":1,"highlight_end":141},{"text":"        lexer.defined_tokens.insert(String::from(\",\"), Token{value: String::from(\",\"), token_type: String::from(\"comma\"), x: -1, y: -1});","highlight_start":1,"highlight_end":138},{"text":"        lexer.defined_tokens.insert(String::from(\"\\t\"), Token{value: String::from(\"\\t\"), token_type: String::from(\"indent\"), x: -1, y: -1});","highlight_start":1,"highlight_end":141},{"text":"        lexer.defined_tokens.insert(String::from(\"\\n\"), Token{value: String::from(\"\\n\"), token_type: String::from(\"new line\"), x: -1, y: -1});","highlight_start":1,"highlight_end":143},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        lexer","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constructor `lexer` has the same name as the type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lexer.rs:77:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn lexer() -> Lexer {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut lexer = Lexer{defined_tokens: HashMap::new(), text_to_lex: [].to_vec(), index: -1, run: true, \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            current_char: ' ', x: 0, y: 1, the_nums: vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            log: Vec::new(), error: Vec::new(), tok_start_x: 0,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        lexer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\u001b[0m\n\n"}
{"message":"called `unwrap` on `file` after checking its variant with `is_ok`","code":{"code":"clippy::unnecessary_unwrap","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":234,"byte_end":247,"line_start":16,"line_end":16,"column_start":20,"column_end":33,"is_primary":true,"text":[{"text":"        let read = file.unwrap();","highlight_start":20,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::unnecessary_unwrap)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":193,"byte_end":208,"line_start":14,"line_end":14,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    if file.is_ok()","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":"if let Ok(..) = file","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: called `unwrap` on `file` after checking its variant with `is_ok`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:16:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if file.is_ok()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: try: `if let Ok(..) = file`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let read = file.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unnecessary_unwrap)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\u001b[0m\n\n"}
{"message":"10 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 10 warnings emitted\u001b[0m\n\n"}
